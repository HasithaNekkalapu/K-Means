plot(Gender ~ Centimeters,util)
plot(Gender ~ Centimeters,student)
View(student)
source('~/.active-rstudio-document')
studentData <- read.csv("C:/Users/Hasitha/Documents/Cloud/KMeans/data.csv")
View(studentData)
str(studentData)
plot(Centimeters ~ Latitude,studentData)
plot(Centimeters ~ BloodType,studentData)
plot(Centimeters ~ Age,studentData)
plot(Centimeters ~ BloodType,studentData)
plot(Centimeters ~ gender,studentData)
plot(Centimeters ~ Gender,studentData)
plot(Centimeters ~ BloodType,studentData)
plot(Centimeters ~ Age,studentData)
plot(Centimeters ~ Latitude,studentData)
plot(Centimeters ~ Latitude ~ Longitude,studentData)
plot(Centimeters ~ Latitude,Longitude,studentData)
plot(Centimeters ~ Longitude,studentData)
plot(Centimeters ~ City)
plot(Centimeters ~ City,studentData)
plot(Centimeters ~ State,studentData)
plot(State ~ Bloodgroup,studentData)
plot(State ~ BloodType,studentData)
plot(BloodType ~ State,studentData)
with(studentData,text(BloodType~State, labels=Gender))
str(studentData)
earthquakes <- read.csv("C:/Users/Hasitha/Documents/Cloud/aws_rds/earthquakes.csv")
str(studentData)
str(earthquakes)
plot(mag ~ depth,earthquakes)
plot(depth ~ mag,earthquakes)
with(earthquakes,text(depth~mag,labels=place))
with(earthquakes,text(depth~mag,labels=place))
with(earthquakes,text(depth~mag,labels=type))
with(earthquakes,text(depth~mag,labels=type))
plot(depth ~ mag,earthquakes)
plot(Centimeters ~ Gender,studentData)
studentData <- read.csv("C:/Users/Hasitha/Documents/Cloud/aws_rds/data.csv")
View(earthquakes)
View(studentData)
View(studentData)
View(studentData)
View(studentData)
view(studentData)
View(studentData)
studentData <- read.csv("C:/Users/Hasitha/Documents/Cloud/aws_rds/data.csv")
studentData <- read.csv("C:/Users/Hasitha/Documents/Cloud/aws_rds/data.csv")
source('~/.active-rstudio-document')
str(studentData)
plot(City~Surname,studentData)
plot(BloodType~Gender,studentData)
plot(Centimeters~Gender,studentData)
plot(Centimeters~Age,studentData)
with(studentData,text(Centimeters~Age, labels=BloodType)
)
with(studentData,text(Centimeters~Age, labels=BloodType,pos=4,ce=.4))
with(studentData,text(Centimeters~Age, labels=BloodType,pos=4,ce=.4))
studentData <- read.csv("C:/Users/Hasitha/Documents/Cloud/aws_rds/data.csv")
with(studentData,text(Centimeters~Age, labels=BloodType,pos=4,ce=.4))
plot(Centimeters~Age,studentData)
plot(Centimeters~Age,studentData)
with(studentData,text(Centimeters~Age, labels=BloodType,pos=4,ce=.4))
studentData <- read.csv("C:/Users/Hasitha/Documents/Cloud/aws_rds/data.csv")
plot(Centimeters~Age,studentData)
with(studentData,text(Centimeters~Age, labels=BloodType,pos=4,ce=.4))
studentData <- read.csv("C:/Users/Hasitha/Documents/Cloud/aws_rds/data.csv")
View(studentData)
studentData <- read.csv("C:/Users/Hasitha/Documents/Cloud/aws_rds/data.csv")
studentData <- read.csv("C:/Users/Hasitha/Documents/Cloud/aws_rds/data.csv")
View(studentData)
studentData <- read.csv("C:/Users/Hasitha/Documents/Cloud/aws_rds/data.csv")
shiny::runApp('test')
runApp('test')
library(plotly)
install.packages(library(plotly))
install.packages(plotly)
library(plotly)
install.packages("plotly")
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
library(plotly)
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
chart_link = api_create(p, filename="bar/basic")
print(distance,digits=3)
studentData <- read.csv("C:/Users/Hasitha/Documents/Cloud/aws_rds/data.csv")
plot(Centimeters~Age,studentData)
z <- studentData[,-c(1,1)]
m <- apply(z,2,mean)
s <- apply(z,2,sd)
z <- scale(z,m,s)
distance <- dist(z)
print(distance,digits=3)
dist(m)
m
dist(z)
library(plotly)
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
View(studentData)
library("ggplot2")
install packages("ggplot2")
install packages("ggplot")
install.packages("ggplot2")
library("ggplot2")
data <- read.csv("data.csv")
data <- read.csv("C:\Users\Hasitha\Documents\Cloud\KMeans\data.csv")
data <- read.csv("C:/Users/Hasitha/Documents/Cloud/KMeans/data.csv")
subTable <- data[,-c(1,1)]
subTable_1 <- scale(subTable)
set.seed(42)
result <- kmeans(subTable, 3)
plot(subTable[c("age","height")], col=result$cluster)
plot(subTable[c("age","Centimeters")], col=result$cluster)
plot(subTable[c("Age","Centimeters")], col=result$cluster)
points(result$centers, col="blue")
lines(result$centers, col="black")
library(dplyr)
library(shiny)
library(ggplot2)
# ui
ui_foo = fluidPage(
plotOutput(
"plot_foo"
),
numericInput(inputId = "income", label = "Income: ", value = NULL),
actionButton("button_click", "Update"),
textOutput("entered_income_percentile"),
br(),
actionButton(inputId = "done", "Done")
)
# server
server_foo = shinyServer(function(input, output) {
react_vals = reactiveValues(
# simulate some data --> initialize the reactive dataset
df_foo = data_frame(
Percentile = as.numeric(seq.int(99)),
BTI = sort(rnorm(99)),
`Data Type` = "Original"
)
)
library(dplyr)
library(shiny)
library(ggplot2)
# ui
ui_foo = fluidPage(
plotOutput(
"plot_foo"
),
numericInput(inputId = "income", label = "Income: ", value = NULL),
actionButton("button_click", "Update"),
textOutput("entered_income_percentile"),
br(),
actionButton(inputId = "done", "Done")
)
# server
server_foo = shinyServer(function(input, output) {
react_vals = reactiveValues(
# simulate some data --> initialize the reactive dataset
df_foo = data_frame(
Percentile = as.numeric(seq.int(99)),
BTI = sort(rnorm(99)),
`Data Type` = "Original"
)
)
server_foo = shinyServer(function(input, output) {
react_vals = reactiveValues(
# simulate some data --> initialize the reactive dataset
df_foo = data_frame(
Percentile = as.numeric(seq.int(99)),
BTI = sort(rnorm(99)),
`Data Type` = "Original"
)
)
})
ui_foo = fluidPage(
plotOutput(
"plot_foo"
),
numericInput(inputId = "income", label = "Income: ", value = NULL),
actionButton("button_click", "Update"),
textOutput("entered_income_percentile"),
br(),
actionButton(inputId = "done", "Done")
)
server_foo = shinyServer(function(input, output) {
react_vals = reactiveValues(
# simulate some data --> initialize the reactive dataset
df_foo = data_frame(
Percentile = as.numeric(seq.int(99)),
BTI = sort(rnorm(99)),
`Data Type` = "Original"
)
)
})
library(dplyr)
library(shiny)
library(ggplot2)
ui_foo = fluidPage(
plotOutput(
"plot_foo"
),
numericInput(inputId = "income", label = "Income: ", value = NULL),
actionButton("button_click", "Update"),
textOutput("entered_income_percentile"),
br(),
actionButton(inputId = "done", "Done")
)
source('abc.R')
v
nlk
{}
}
)
))
)
source('abc.R')
source('abc.R')
runApp('kmeans')
runApp('kmeans')
runApp('kmeans')
runApp('kmeans')
runApp('kmeans')
data <- read.csv("C:/Users/Hasitha/Documents/Cloud/KMeans/data.csv")
runApp('kmeans')
runApp('kmeans')
